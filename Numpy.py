# 勉強元リンク: https://youtu.be/gnTxKHMYqFI?si=zjX2XeGGdkAHuCce

# NumPy
# 高度な数値計算ができるライブラリ
# Python のリストとは処理が異なる
# 配列同士の計算や、行列計算が可能
# !pip install numpy
import numpy as np

# ndarray 配列
# 1 次元配列
# np.array(リスト)
# Python のリストとは処理が異なる
x_li = [10, 14, 19]
x_np = np.array([10, 14, 19])

print(x_li * 2)
# => [10, 14, 19, 10, 14, 19]
print(x_np * 2)
# => [20 28 38]
y = np.array(["A", "B", "C"])

# 多次元の配列の作成

# 2 次元配列
x_2d = np.array(
    [[10, 14, 15],
     [20, 24, 26]]
)

# 3 次元配列
x_3d = np.array(
    [[[10, 11], [13, 14], [16, 17]],
     [[20, 21], [23, 24], [26, 27]]]
)

# 配列の操作
# .ndim: 次元を調べる 
print(x_np.ndim, x_2d.ndim, x_3d.ndim)
# => 1 2 3

# .shape: 各次元のサイズを調べる
print(x_np.shape, x_2d.shape, x_3d.shape)
# => (3,) (2, 3) (2, 3, 2)

# 初期化
# np.zeros(作りたい配列のshape)     : すべての要素を 0 で初期化
# np.ones((サイズ1, サイズ2, ...))  : すべての要素を 1 で初期化
# np.empty(サイズ1, サイズ2, ...)   : 要素が空の配列で初期化 高速
# ramdom.rand(サイズ1, サイズ2, ...): すべての要素を 0 ~ 1 のランダムな値で初期化
print(np.zeros(3))
# => [0. 0. 0.]

print(np.ones((2,3)))
# => [[1. 1. 1.]
#     [1. 1. 1.]]

print(np.empty((2,4)))
# => [[6.40728662e-310 6.40728662e-310 6.40727998e-310 6.40727998e-310]
#     [6.40728004e-310 6.40728623e-310 6.40728623e-310 6.40727998e-310]]

print(np.random.rand(3,2))
# => [[0.27818421 0.77786535]
#     [0.63305503 0.37525119]
#     [0.30020444 0.291125  ]]

# 配列の全要素に対する四則演算
# 足し算: 配列 + 数値
# 引き算: 配列 - 数値
# かけ算: 配列 * 数値
# わり算: 配列 / 数値

x = np.array(
    [[10, 14, 15],
     [20, 24, 26]]
)
print(x + 2)
# => [[12 16 17]
#     [22 26 28]]

print(x - 2)
# => [[ 8 12 13]
#     [18 22 24]]

print(x * 2)
# => [[20 28 30]
#     [40 48 52]]

print(x / 2)
# => [[ 5.   7.   7.5]
#     [10.  12.  13. ]]

# 同じ shape の配列同士の四則演算
# 演算は要素同士で行われる
# 足し算: 配列1 + 配列2
# 引き算: 配列1 - 配列2
# かけ算: 配列1 * 配列2
# わり算: 配列1 / 配列2

x = np.array(
    [[10, 14, 15],
     [20, 24, 26]]
)

y = np.array(
    [range(1,4),
     range(2,5)]
)

print(x + y)
# => [[11 16 18]
#     [22 27 30]]

print(x - y)
# => [[ 9 12 12]
#     [18 21 22]]

print(x * y)
# => [[ 10  28  45]
#     [ 40  72 104]]

print(x / y)
# => [[10.   7.   5. ]
#     [10.   8.   6.5]]

# 異なる大きさの配列で四則演算できる場合
# 1 次元配列のサイズと
# 多次元配列の最後の次元のサイズが同じ
# 行列なら行ごとの四則演算

x = np.array(
    [[10, 14, 15],
     [20, 24, 26]]
)
y = np.array([2, 3, 4])

print(x + y)
# => [[12 17 19]
#     [22 27 30]]

print(x - y)
# => [[ 8 11 11]
#     [18 21 22]]

print(x * y)
# => [[ 20  42  60]
#     [ 40  72 104]]

print(x / y)
# => [[ 5.          4.66666667  3.75      ]
#     [10.          8.          6.5       ]]

# n 行 1 列の 2 次元配列の行サイズと
# 多次元配列の最後から 2 番目の次元のサイズが同じ

x = np.array(
    [[2],
     [3],
     [4]]
)

y = np.array(
    [[10, 11],
     [12, 13],
     [14, 15]]
)

print(x + y)
# => [[12 13]
#     [15 16]
#     [18 19]]

print(x - y)
# => [[ -8  -9]
#     [ -9 -10]
#     [-10 -11]]

print(x * y)
# => [[20 22]
#     [36 39]
#     [56 60]]

print(x / y)
# => [[0.2        0.18181818]
#     [0.25       0.23076923]
#     [0.28571429 0.26666667]]

# 行列の積計算
# 左側の配列の列サイズ (行数) と
# 右側の配列の行サイズ (列数) が同じ

x = np.array(
    [range(1,4),
     range(0,3)]
)

y = np.array(
    [[10, 11],
     [12, 13],
     [14, 15]]
)

print(np.dot(x,y))
# => [[76 82]
#     [40 43]]

# 配列の変形
# reshape(変形後の shape)
# 変形前と変形後の要素数が等しくないとエラー
x = np.array(
    [range(1,4),
     range(0,3)]
)

print(x.reshape(3,2))
# => [[1 2]
#     [3 0]
#     [1 2]]

# 1 次元配列に変形
# .flatten()
x = np.array(
    [range(1,4),
     range(0,3)]
)

print(x.flatten())
# => [1 2 3 0 1 2]

# 配列の要素の取得
# 通常のリストと同じ

x = np.array(
    [range(1,4),
     range(0,3)]
)

print(x[0, :])
# => [1 2 3]

print(x[:, 1])
# => [2 1]

print(x[1, 1])
# => 1

print(x[0:2, 0:2])
# => [[1 2]
#     [0 1]]

# 配列の結合
# np.concatenate([配列 1, 配列 2], 軸)
# 軸未指定だと縦に結合
# 1 を指定すると横に結合

x = np.array(
    [range(1,4),
     range(0,3)]
)

y = np.array(
    [[10, 11],
     [12, 13],
     [14, 15]]
).reshape(2,3)

print(np.concatenate([x, y]))
# => [[ 1  2  3]
#     [ 0  1  2]
#     [10 11 12]
#     [13 14 15]]

print(np.concatenate([x, y], 1))
# => [[ 1  2  3 10 11 12]
#     [ 0  1  2 13 14 15]]

# 組み込み関数
# 最大値   : np.max(配列やリスト)
# 最小値   : np.min(配列やリスト)
# 合計     : np.sum(配列やリスト)
# 要素の積 : np.prod(配列やリスト)
# 平均     : np.mean(配列やリスト)
# 標準偏差 : np.std(配列やリスト)
# 分散     : np.var(配列やリスト)
# 中央値   : np.median(配列やリスト)

# 対数   : np.log(数値)
# 平方根 : np.sqrt(数値)
# sin    : np.sin(数値)
# cos    : np.cos(数値)
# tan    : np.tan(数値)
# 円周率 : np.pi